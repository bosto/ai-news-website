version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: ai-news-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ai_news_db
      POSTGRES_USER: ai_news_user
      POSTGRES_PASSWORD: ai_news_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_news_user -d ai_news_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: ai-news-backend
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://ai_news_user:ai_news_password@database:5432/ai_news_db
      
      # Server
      PORT: 3001
      NODE_ENV: production
      
      # JWT
      JWT_SECRET: your_super_secure_jwt_secret_change_in_production
      JWT_EXPIRES_IN: 7d
      
      # OpenAI (Add your API key)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      
      # CORS
      FRONTEND_URL: http://localhost:3000
      
      # News API (Optional)
      NEWS_API_KEY: ${NEWS_API_KEY:-}
    ports:
      - "3001:3001"
    volumes:
      - backend_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ai-news-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
      PORT: 3000
      HOSTNAME: 0.0.0.0
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional - for future caching needs)
  redis:
    image: redis:7-alpine
    container_name: ai-news-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  default:
    name: ai-news-network