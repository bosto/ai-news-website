// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model AIAuthor {
  id             String    @id @default(cuid())
  name           String
  bio            String
  avatar         String?
  specialization String[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  articles       Article[]

  @@map("ai_authors")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String
  color       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  articles    Article[]

  @@map("categories")
}

model Article {
  id            String         @id @default(cuid())
  title         String
  slug          String         @unique
  summary       String
  content       String
  authorId      String
  categoryId    String
  tags          String[]
  publishedAt   DateTime
  updatedAt     DateTime       @updatedAt
  readTime      Int
  isAIGenerated Boolean        @default(true)
  sourceUrl     String?
  imageUrl      String?
  viewCount     Int            @default(0)
  status        ArticleStatus  @default(PUBLISHED)
  author        AIAuthor       @relation(fields: [authorId], references: [id])
  category      Category       @relation(fields: [categoryId], references: [id])
  summaries     NewsSummary[]

  @@map("articles")
}

model NewsSource {
  id            String        @id @default(cuid())
  name          String
  url           String
  rssUrl        String?
  logoUrl       String?
  isActive      Boolean       @default(true)
  lastScrapedAt DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  summaries     NewsSummary[]

  @@map("news_sources")
}

model NewsSummary {
  id                String     @id @default(cuid())
  originalArticleId String
  sourceId          String
  summaryContent    String
  keyPoints         String[]
  generatedAt       DateTime   @default(now())
  aiModel           String
  article           Article    @relation(fields: [originalArticleId], references: [id])
  source            NewsSource @relation(fields: [sourceId], references: [id])

  @@map("news_summaries")
}

model ExternalArticle {
  id          String   @id @default(cuid())
  title       String
  content     String
  url         String   @unique
  sourceId    String
  publishedAt DateTime
  scrapedAt   DateTime @default(now())
  processed   Boolean  @default(false)

  @@map("external_articles")
}

enum UserRole {
  USER
  ADMIN
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}